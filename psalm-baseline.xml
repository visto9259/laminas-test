<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.26.1@d747f6500b38ac4f7dfc5edbcae6e4b637d7add0">
  <file src="src/PHPUnit/Constraint/IsCurrentModuleNameConstraint.php">
    <PossiblyFalseArgument>
      <code><![CDATA[strrpos($appModules, '\\')]]></code>
    </PossiblyFalseArgument>
  </file>
  <file src="src/PHPUnit/Constraint/LaminasConstraint.php">
    <InternalClass>
      <code><![CDATA[new ExpectationFailedException(
                $this->createFailureMessage($failedException->getMessage()),
                $failedException->getComparisonFailure(),
            )]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[getComparisonFailure]]></code>
      <code><![CDATA[new ExpectationFailedException(
                $this->createFailureMessage($failedException->getMessage()),
                $failedException->getComparisonFailure(),
            )]]></code>
    </InternalMethod>
    <MixedArgument>
      <code><![CDATA[$controllerManager->get($controllerIdentifier)]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$controllerIdentifier]]></code>
      <code><![CDATA[$controllerManager]]></code>
      <code><![CDATA[$routeMatch]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[get]]></code>
      <code><![CDATA[getParam]]></code>
      <code><![CDATA[getParam]]></code>
      <code><![CDATA[getRouteMatch]]></code>
    </MixedMethodCall>
    <UndefinedInterfaceMethod>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/PHPUnit/Controller/AbstractControllerTestCase.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$type]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
    </DeprecatedMethod>
    <InternalClass>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting application exception, param "exception" does not exist'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf(
                    'Failed asserting matched route name was "%s", actual matched route name is "%s"',
                    $route,
                    $match
                )
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting action name "%s", actual action name is "%s"', $action, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting action name was NOT "%s"', $action)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller class "%s", actual controller class is "%s"', $controller, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller class was NOT "%s"', $controller)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller name "%s", actual controller name is "%s"', $controller, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller name was NOT "%s"', $controller)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting response code "%s", actual status code is "%s"', $code, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting response code was NOT "%s"', $code)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Several modules WAS not loaded "%s"', implode(', ', $list))
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Several modules are not loaded "%s"', implode(', ', $list))
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting application exception, param "exception" does not exist'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf(
                    'Failed asserting matched route name was "%s", actual matched route name is "%s"',
                    $route,
                    $match
                )
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting action name "%s", actual action name is "%s"', $action, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting action name was NOT "%s"', $action)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller class "%s", actual controller class is "%s"', $controller, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller class was NOT "%s"', $controller)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller name "%s", actual controller name is "%s"', $controller, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting controller name was NOT "%s"', $controller)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting response code "%s", actual status code is "%s"', $code, $match)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Failed asserting response code was NOT "%s"', $code)
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Several modules WAS not loaded "%s"', implode(', ', $list))
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                sprintf('Several modules are not loaded "%s"', implode(', ', $list))
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage('No route matched'))]]></code>
    </InternalMethod>
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->getApplication()->getServiceManager()]]></code>
    </LessSpecificReturnStatement>
    <MissingClosureParamType>
      <code><![CDATA[$r]]></code>
    </MissingClosureParamType>
    <MixedArgument>
      <code><![CDATA[$event]]></code>
      <code><![CDATA[$event]]></code>
      <code><![CDATA[$match]]></code>
      <code><![CDATA[$match]]></code>
      <code><![CDATA[$match]]></code>
      <code><![CDATA[$match]]></code>
      <code><![CDATA[$match]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$modulesLoaded]]></code>
      <code><![CDATA[$modulesLoaded]]></code>
      <code><![CDATA[$post]]></code>
      <code><![CDATA[$query]]></code>
      <code><![CDATA[$query]]></code>
      <code><![CDATA[$viewModel]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$list]]></code>
      <code><![CDATA[$list]]></code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code><![CDATA[$event]]></code>
      <code><![CDATA[$exception]]></code>
      <code><![CDATA[$headers]]></code>
      <code><![CDATA[$match]]></code>
      <code><![CDATA[$match]]></code>
      <code><![CDATA[$match]]></code>
      <code><![CDATA[$match]]></code>
      <code><![CDATA[$match]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$moduleManager]]></code>
      <code><![CDATA[$moduleManager]]></code>
      <code><![CDATA[$modulesLoaded]]></code>
      <code><![CDATA[$modulesLoaded]]></code>
      <code><![CDATA[$post]]></code>
      <code><![CDATA[$query]]></code>
      <code><![CDATA[$routeMatch]]></code>
      <code><![CDATA[$routeMatch]]></code>
      <code><![CDATA[$routeMatch]]></code>
      <code><![CDATA[$routeMatch]]></code>
      <code><![CDATA[$routeMatch]]></code>
      <code><![CDATA[$routeMatch]]></code>
      <code><![CDATA[$viewModel]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[addHeaderLine]]></code>
      <code><![CDATA[detach]]></code>
      <code><![CDATA[getError]]></code>
      <code><![CDATA[getMatchedRouteName]]></code>
      <code><![CDATA[getModules]]></code>
      <code><![CDATA[getModules]]></code>
      <code><![CDATA[getParam]]></code>
      <code><![CDATA[getParam]]></code>
      <code><![CDATA[getParam]]></code>
      <code><![CDATA[getParam]]></code>
      <code><![CDATA[getParam]]></code>
      <code><![CDATA[getParam]]></code>
      <code><![CDATA[getParam]]></code>
      <code><![CDATA[getResponse]]></code>
      <code><![CDATA[getRouteMatch]]></code>
      <code><![CDATA[getRouteMatch]]></code>
      <code><![CDATA[getRouteMatch]]></code>
      <code><![CDATA[getRouteMatch]]></code>
      <code><![CDATA[getRouteMatch]]></code>
      <code><![CDATA[getRouteMatch]]></code>
      <code><![CDATA[getViewModel]]></code>
      <code><![CDATA[setName]]></code>
      <code><![CDATA[setParam]]></code>
      <code><![CDATA[toArray]]></code>
      <code><![CDATA[toArray]]></code>
    </MixedMethodCall>
    <MoreSpecificReturnType>
      <code><![CDATA[ServiceManager]]></code>
    </MoreSpecificReturnType>
    <PossiblyFalseOperand>
      <code><![CDATA[strrpos($controllerClass, '\\')]]></code>
      <code><![CDATA[strrpos($controllerClass, '\\')]]></code>
    </PossiblyFalseOperand>
    <PossiblyNullPropertyAssignmentValue>
      <code><![CDATA[null]]></code>
    </PossiblyNullPropertyAssignmentValue>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->application]]></code>
      <code><![CDATA[null !== $this->application]]></code>
      <code><![CDATA[null !== $this->application && null !== $this->applicationConfig]]></code>
      <code><![CDATA[null !== $this->applicationConfig]]></code>
    </RedundantConditionGivenDocblockType>
    <TooManyArguments>
      <code><![CDATA[getTemplate]]></code>
    </TooManyArguments>
    <UndefinedInterfaceMethod>
      <code><![CDATA[getHeaders]]></code>
      <code><![CDATA[getMethod]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getPost]]></code>
      <code><![CDATA[getQuery]]></code>
      <code><![CDATA[setMethod]]></code>
      <code><![CDATA[setPost]]></code>
      <code><![CDATA[setQuery]]></code>
      <code><![CDATA[setRequestUri]]></code>
      <code><![CDATA[setUri]]></code>
    </UndefinedInterfaceMethod>
    <UndefinedMethod>
      <code><![CDATA[setExpectedException]]></code>
    </UndefinedMethod>
  </file>
  <file src="src/PHPUnit/Controller/AbstractHttpControllerTestCase.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$pattern]]></code>
      <code><![CDATA[$pattern]]></code>
      <code><![CDATA[$pattern]]></code>
      <code><![CDATA[$pattern]]></code>
      <code><![CDATA[$pattern]]></code>
      <code><![CDATA[$pattern]]></code>
      <code><![CDATA[$pattern]]></code>
      <code><![CDATA[$pattern]]></code>
      <code><![CDATA[$pattern]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
      <code><![CDATA[createFailureMessage]]></code>
    </DeprecatedMethod>
    <InternalClass>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                    'Failed asserting node DENOTED BY %s DOES NOT CONTAIN content "%s"',
                    $path,
                    $match
                )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                    'Failed asserting response header "%s" DOES NOT CONTAIN "%s"',
                    $header,
                    $match
                )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                    'Failed asserting response header "%s" DOES NOT MATCH regex "%s"',
                    $header,
                    $pattern
                )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s DOES NOT CONTAIN content MATCHING "%s"',
                $path,
                $pattern
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s DOES NOT EXIST',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s DOES NOT OCCUR EXACTLY %d times',
                $path,
                $count
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s OCCURS AT LEAST %d times, actually occurs %d times',
                $path,
                $count,
                $match
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s OCCURS AT MOST %d times, actually occurs %d times',
                $path,
                $count,
                $match
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s OCCURS EXACTLY %d times, actually occurs %d times',
                $path,
                $count,
                $match
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node denoted by %s CONTAINS content MATCHING "%s", actual content is "%s"',
                $path,
                $pattern,
                implode('', $nodeValues)
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response DOES NOT redirect to URL MATCHING "%s"',
                $pattern
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" WAS NOT found',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" exists and contains "%s", actual content is "%s"',
                $header,
                $match,
                $currentHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" exists and matches regex "%s", actual content is "%s"',
                $header,
                $pattern,
                $currentHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" found',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response is NOT a redirect, actual redirection is "%s"',
                $responseHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response redirects to "%s"',
                $url
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response redirects to "%s", actual redirection is "%s"',
                $url,
                $responseHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response redirects to URL MATCHING "%s", actual redirection is "%s"',
                $pattern,
                $responseHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
            'Failed asserting node denoted by %s CONTAINS content "%s", Contents: [%s]',
            $path,
            $match,
            implode(',', $nodeValues)
        )))]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(
                'Failed asserting response is a redirect'
            ))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                    'Failed asserting node DENOTED BY %s DOES NOT CONTAIN content "%s"',
                    $path,
                    $match
                )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                    'Failed asserting response header "%s" DOES NOT CONTAIN "%s"',
                    $header,
                    $match
                )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                    'Failed asserting response header "%s" DOES NOT MATCH regex "%s"',
                    $header,
                    $pattern
                )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s DOES NOT CONTAIN content MATCHING "%s"',
                $path,
                $pattern
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s DOES NOT EXIST',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s DOES NOT OCCUR EXACTLY %d times',
                $path,
                $count
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s EXISTS',
                $path
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s OCCURS AT LEAST %d times, actually occurs %d times',
                $path,
                $count,
                $match
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s OCCURS AT MOST %d times, actually occurs %d times',
                $path,
                $count,
                $match
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node DENOTED BY %s OCCURS EXACTLY %d times, actually occurs %d times',
                $path,
                $count,
                $match
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting node denoted by %s CONTAINS content MATCHING "%s", actual content is "%s"',
                $path,
                $pattern,
                implode('', $nodeValues)
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response DOES NOT redirect to URL MATCHING "%s"',
                $pattern
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" WAS NOT found',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" exists and contains "%s", actual content is "%s"',
                $header,
                $match,
                $currentHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" exists and matches regex "%s", actual content is "%s"',
                $header,
                $pattern,
                $currentHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header "%s" found',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response header, header "%s" doesn\'t exist',
                $header
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response is NOT a redirect, actual redirection is "%s"',
                $responseHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response redirects to "%s"',
                $url
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response redirects to "%s", actual redirection is "%s"',
                $url,
                $responseHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
                'Failed asserting response redirects to URL MATCHING "%s", actual redirection is "%s"',
                $pattern,
                $responseHeader->getFieldValue()
            )))]]></code>
      <code><![CDATA[new ExpectationFailedException($this->createFailureMessage(sprintf(
            'Failed asserting node denoted by %s CONTAINS content "%s", Contents: [%s]',
            $path,
            $match,
            implode(',', $nodeValues)
        )))]]></code>
    </InternalMethod>
    <InvalidReturnStatement>
      <code><![CDATA[$this->getResponse()->getHeaders()->get($header)]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[HeaderInterface|false]]></code>
    </InvalidReturnType>
    <MixedArgument>
      <code><![CDATA[$currentHeader->getFieldValue()]]></code>
      <code><![CDATA[$currentHeader->getFieldValue()]]></code>
      <code><![CDATA[$currentHeader->getFieldValue()]]></code>
      <code><![CDATA[$currentHeader->getFieldValue()]]></code>
      <code><![CDATA[$response->getContent()]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$currentValue]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[getFieldValue]]></code>
      <code><![CDATA[getFieldValue]]></code>
      <code><![CDATA[getFieldValue]]></code>
      <code><![CDATA[getFieldValue]]></code>
      <code><![CDATA[getFieldValue]]></code>
      <code><![CDATA[getFieldValue]]></code>
      <code><![CDATA[getFieldValue]]></code>
      <code><![CDATA[getFieldValue]]></code>
    </MixedMethodCall>
    <MixedPropertyFetch>
      <code><![CDATA[$node->nodeValue]]></code>
    </MixedPropertyFetch>
    <PossiblyUndefinedVariable>
      <code><![CDATA[$currentHeader]]></code>
      <code><![CDATA[$currentHeader]]></code>
      <code><![CDATA[$currentHeader]]></code>
      <code><![CDATA[$currentHeader]]></code>
      <code><![CDATA[$node]]></code>
    </PossiblyUndefinedVariable>
    <RedundantCondition>
      <code><![CDATA[assertFalse]]></code>
      <code><![CDATA[assertTrue]]></code>
      <code><![CDATA[assertTrue]]></code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[assertFalse]]></code>
      <code><![CDATA[assertFalse]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Util/ModuleLoader.php">
    <MixedArgument>
      <code><![CDATA[$smConfig]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$configuration['module_listener_options']['module_paths'][$key]]]></code>
      <code><![CDATA[$configuration['modules'][]]]></code>
      <code><![CDATA[$module]]></code>
      <code><![CDATA[$smConfig]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[Application]]></code>
      <code><![CDATA[ModuleManager]]></code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code><![CDATA[loadModules]]></code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$this->getServiceManager()->get('Application')]]></code>
      <code><![CDATA[$this->getServiceManager()->get('ModuleManager')]]></code>
    </MixedReturnStatement>
  </file>
  <file src="test/PHPUnit/Controller/AbstractControllerTestCaseTest.php">
    <InvalidArgument>
      <code><![CDATA[$haystack]]></code>
      <code><![CDATA[$haystack]]></code>
    </InvalidArgument>
    <MixedArgument>
      <code><![CDATA[$message]]></code>
      <code><![CDATA[$message]]></code>
      <code><![CDATA[$this->getRequest()->getContent()]]></code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$config['module_listener_options']['cache_dir']]]></code>
    </MixedArrayAccess>
    <MixedArrayAssignment>
      <code><![CDATA[$applicationConfig['module_listener_options']['module_paths']]]></code>
      <code><![CDATA[$applicationConfig['module_listener_options']['module_paths']['ModuleWithNamespace\TestModule']]]></code>
      <code><![CDATA[$applicationConfig['modules'][]]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code><![CDATA[$config]]></code>
      <code><![CDATA[$file]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[getError]]></code>
      <code><![CDATA[setParam]]></code>
      <code><![CDATA[setParam]]></code>
      <code><![CDATA[toString]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$config]]></code>
    </MixedOperand>
    <PossiblyUndefinedVariable>
      <code><![CDATA[$message]]></code>
      <code><![CDATA[$message]]></code>
    </PossiblyUndefinedVariable>
    <PossiblyUnusedReturnValue>
      <code><![CDATA[bool]]></code>
    </PossiblyUnusedReturnValue>
    <UndefinedInterfaceMethod>
      <code><![CDATA[getMethod]]></code>
      <code><![CDATA[getMethod]]></code>
      <code><![CDATA[getMethod]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getQuery]]></code>
      <code><![CDATA[getRequestUri]]></code>
      <code><![CDATA[setMethod]]></code>
      <code><![CDATA[setMethod]]></code>
      <code><![CDATA[setMethod]]></code>
      <code><![CDATA[setMethod]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/PHPUnit/Controller/AbstractHttpControllerTestCaseTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['RuntimeException']]></code>
    </ArgumentTypeCoercion>
    <MixedArgument>
      <code><![CDATA[$layout->getChildren()]]></code>
      <code><![CDATA[$messages]]></code>
      <code><![CDATA[$messages]]></code>
      <code><![CDATA[$messages]]></code>
      <code><![CDATA[$messages]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$controller]]></code>
      <code><![CDATA[$controller]]></code>
      <code><![CDATA[$controller]]></code>
      <code><![CDATA[$controller]]></code>
      <code><![CDATA[$flashMessenger]]></code>
      <code><![CDATA[$flashMessenger]]></code>
      <code><![CDATA[$flashMessenger]]></code>
      <code><![CDATA[$flashMessenger]]></code>
      <code><![CDATA[$layout]]></code>
      <code><![CDATA[$messages]]></code>
      <code><![CDATA[$messages]]></code>
      <code><![CDATA[$messages]]></code>
      <code><![CDATA[$messages]]></code>
      <code><![CDATA[$mvcEvent]]></code>
      <code><![CDATA[$routeMatch]]></code>
      <code><![CDATA[$routeMatch]]></code>
      <code><![CDATA[$viewModel]]></code>
      <code><![CDATA[$viewModel]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[flashMessenger]]></code>
      <code><![CDATA[flashMessenger]]></code>
      <code><![CDATA[flashMessenger]]></code>
      <code><![CDATA[flashMessenger]]></code>
      <code><![CDATA[get]]></code>
      <code><![CDATA[get]]></code>
      <code><![CDATA[get]]></code>
      <code><![CDATA[get]]></code>
      <code><![CDATA[getApplication]]></code>
      <code><![CDATA[getChildren]]></code>
      <code><![CDATA[getError]]></code>
      <code><![CDATA[getMessages]]></code>
      <code><![CDATA[getMessages]]></code>
      <code><![CDATA[getMessages]]></code>
      <code><![CDATA[getMessages]]></code>
      <code><![CDATA[getParam]]></code>
      <code><![CDATA[getParam]]></code>
      <code><![CDATA[getParam]]></code>
      <code><![CDATA[getPort]]></code>
      <code><![CDATA[getResult]]></code>
      <code><![CDATA[getResult]]></code>
      <code><![CDATA[getRouteMatch]]></code>
      <code><![CDATA[getTemplate]]></code>
      <code><![CDATA[getTemplate]]></code>
      <code><![CDATA[getTemplate]]></code>
      <code><![CDATA[getViewModel]]></code>
      <code><![CDATA[setParam]]></code>
      <code><![CDATA[setParam]]></code>
      <code><![CDATA[setPost]]></code>
      <code><![CDATA[setQuery]]></code>
    </MixedMethodCall>
    <UndefinedInterfaceMethod>
      <code><![CDATA[getMethod]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getMvcEvent]]></code>
      <code><![CDATA[getUri]]></code>
      <code><![CDATA[isXmlHttpRequest]]></code>
      <code><![CDATA[isXmlHttpRequest]]></code>
      <code><![CDATA[isXmlHttpRequest]]></code>
      <code><![CDATA[setMethod]]></code>
      <code><![CDATA[setMethod]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/PHPUnit/Controller/MemoryLeakTest.php">
    <PossiblyNullOperand>
      <code><![CDATA[self::$memStart]]></code>
    </PossiblyNullOperand>
  </file>
  <file src="test/PHPUnit/Util/ModuleLoaderTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['Baz\Module']]></code>
      <code><![CDATA['Baz\Module']]></code>
      <code><![CDATA['Baz\Module']]></code>
      <code><![CDATA['Baz\Module']]></code>
      <code><![CDATA['Foo\Module']]></code>
      <code><![CDATA['ModuleWithNamespace\TestModule\Module']]></code>
      <code><![CDATA['stdClass']]></code>
    </ArgumentTypeCoercion>
    <MixedAssignment>
      <code><![CDATA[$baz]]></code>
      <code><![CDATA[$baz]]></code>
      <code><![CDATA[$baz]]></code>
      <code><![CDATA[$baz]]></code>
      <code><![CDATA[$file]]></code>
      <code><![CDATA[$foo]]></code>
      <code><![CDATA[$fooObject]]></code>
    </MixedAssignment>
    <PossiblyUnusedReturnValue>
      <code><![CDATA[bool]]></code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="test/_files/Baz/Module.php">
    <UnusedClass>
      <code><![CDATA[Module]]></code>
    </UnusedClass>
  </file>
  <file src="test/_files/Baz/src/Baz/Controller/IndexController.php">
    <MixedAssignment>
      <code><![CDATA[$numGet]]></code>
      <code><![CDATA[$numPost]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[addHeaderLine]]></code>
      <code><![CDATA[addHeaderLine]]></code>
      <code><![CDATA[addMessage]]></code>
      <code><![CDATA[get]]></code>
      <code><![CDATA[get]]></code>
    </MixedMethodCall>
    <MixedReturnTypeCoercion>
      <code><![CDATA[['num_get' => $numGet, 'num_post' => $numPost]]]></code>
      <code><![CDATA[array<string, string>]]></code>
    </MixedReturnTypeCoercion>
    <UndefinedInterfaceMethod>
      <code><![CDATA[getHeaders]]></code>
      <code><![CDATA[getPost]]></code>
      <code><![CDATA[getQuery]]></code>
    </UndefinedInterfaceMethod>
    <UndefinedMagicMethod>
      <code><![CDATA[flashMessenger]]></code>
    </UndefinedMagicMethod>
    <UnusedClass>
      <code><![CDATA[IndexController]]></code>
    </UnusedClass>
  </file>
  <file src="test/_files/ModuleWithEvents/Module.php">
    <MissingClosureParamType>
      <code><![CDATA[$e]]></code>
    </MissingClosureParamType>
    <PossiblyNullReference>
      <code><![CDATA[attach]]></code>
      <code><![CDATA[getMatchedRouteName]]></code>
    </PossiblyNullReference>
    <UnusedClass>
      <code><![CDATA[Module]]></code>
    </UnusedClass>
    <UnusedClosureParam>
      <code><![CDATA[$e]]></code>
    </UnusedClosureParam>
  </file>
  <file src="test/_files/ModuleWithNamespace/TestModule/Module.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[getAutoloaderConfig]]></code>
      <code><![CDATA[getConfig]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/_files/ModuleWithNamespace/TestModule/src/Controller/IndexController.php">
    <UnusedClass>
      <code><![CDATA[IndexController]]></code>
    </UnusedClass>
  </file>
  <file src="test/_files/ModuleWithSimilarName/Test/Module.php">
    <UnusedClass>
      <code><![CDATA[Module]]></code>
    </UnusedClass>
  </file>
  <file src="test/_files/ModuleWithSimilarName/Test/src/Controller/IndexController.php">
    <UnusedClass>
      <code><![CDATA[IndexController]]></code>
    </UnusedClass>
  </file>
  <file src="test/_files/ModuleWithSimilarName/TestModule/Module.php">
    <UnusedClass>
      <code><![CDATA[Module]]></code>
    </UnusedClass>
  </file>
  <file src="test/_files/ModuleWithSimilarName/TestModule/src/Controller/IndexController.php">
    <UnusedClass>
      <code><![CDATA[IndexController]]></code>
    </UnusedClass>
  </file>
  <file src="test/_files/modules-path/with-subdir/Bar/Module.php">
    <MissingClosureParamType>
      <code><![CDATA[$sm]]></code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code><![CDATA[static function ($sm) {]]></code>
    </MissingClosureReturnType>
    <MixedAssignment>
      <code><![CDATA[$foo]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[get]]></code>
    </MixedMethodCall>
    <MixedPropertyAssignment>
      <code><![CDATA[$foo]]></code>
    </MixedPropertyAssignment>
    <UnusedClass>
      <code><![CDATA[Module]]></code>
    </UnusedClass>
  </file>
  <file src="test/_files/modules-path/with-subdir/Bar/src/Bar/Controller/IndexController.php">
    <UnusedClass>
      <code><![CDATA[IndexController]]></code>
    </UnusedClass>
  </file>
  <file src="test/_files/modules-path/with-subdir/Foo/Module.php">
    <MissingClosureParamType>
      <code><![CDATA[$sm]]></code>
    </MissingClosureParamType>
    <UnusedClass>
      <code><![CDATA[Module]]></code>
    </UnusedClass>
    <UnusedClosureParam>
      <code><![CDATA[$sm]]></code>
    </UnusedClosureParam>
  </file>
  <file src="test/_files/modules-path/with-subdir/Foo/src/Foo/Controller/IndexController.php">
    <UnusedClass>
      <code><![CDATA[IndexController]]></code>
    </UnusedClass>
  </file>
</files>
